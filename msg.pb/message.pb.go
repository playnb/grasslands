// Code generated by protoc-gen-go.
// source: msg.pb/message.proto
// DO NOT EDIT!

/*
Package msg_pb is a generated protocol buffer package.

It is generated from these files:
	msg.pb/message.proto

It has these top-level messages:
	StarupRequest
	StarupResponse
*/
package msg_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "github.com/chai2010/protorpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ////////////////////////////////////////////////////////////////////////
type StarupRequest struct {
	ServerType       *int32  `protobuf:"varint,1,opt,name=ServerType" json:"ServerType,omitempty"`
	ServerIP         *string `protobuf:"bytes,2,opt,name=ServerIP" json:"ServerIP,omitempty"`
	ServerName       *string `protobuf:"bytes,3,opt,name=ServerName" json:"ServerName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StarupRequest) Reset()         { *m = StarupRequest{} }
func (m *StarupRequest) String() string { return proto.CompactTextString(m) }
func (*StarupRequest) ProtoMessage()    {}

func (m *StarupRequest) GetServerType() int32 {
	if m != nil && m.ServerType != nil {
		return *m.ServerType
	}
	return 0
}

func (m *StarupRequest) GetServerIP() string {
	if m != nil && m.ServerIP != nil {
		return *m.ServerIP
	}
	return ""
}

func (m *StarupRequest) GetServerName() string {
	if m != nil && m.ServerName != nil {
		return *m.ServerName
	}
	return ""
}

type StarupResponse struct {
	Request          *StarupRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	ServerID         *int32         `protobuf:"varint,2,opt,name=ServerID" json:"ServerID,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *StarupResponse) Reset()         { *m = StarupResponse{} }
func (m *StarupResponse) String() string { return proto.CompactTextString(m) }
func (*StarupResponse) ProtoMessage()    {}

func (m *StarupResponse) GetRequest() *StarupRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *StarupResponse) GetServerID() int32 {
	if m != nil && m.ServerID != nil {
		return *m.ServerID
	}
	return 0
}

type StarupService interface {
	Starup(in *StarupRequest, out *StarupResponse) error
}

// AcceptStarupServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptStarupServiceClient(lis net.Listener, x StarupService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("StarupService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterStarupService publish the given StarupService implementation on the server.
func RegisterStarupService(srv *rpc.Server, x StarupService) error {
	if err := srv.RegisterName("StarupService", x); err != nil {
		return err
	}
	return nil
}

// NewStarupServiceServer returns a new StarupService Server.
func NewStarupServiceServer(x StarupService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("StarupService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeStarupService listen announces on the local network address laddr
// and serves the given StarupService implementation.
func ListenAndServeStarupService(network, addr string, x StarupService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("StarupService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type StarupServiceClient struct {
	*rpc.Client
}

// NewStarupServiceClient returns a StarupService stub to handle
// requests to the set of StarupService at the other end of the connection.
func NewStarupServiceClient(conn io.ReadWriteCloser) *StarupServiceClient {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &StarupServiceClient{c}
}

func (c *StarupServiceClient) Starup(in *StarupRequest) (out *StarupResponse, err error) {
	if in == nil {
		in = new(StarupRequest)
	}
	out = new(StarupResponse)
	if err = c.Call("StarupService.Starup", in, out); err != nil {
		return nil, err
	}
	return out, nil
}

// DialStarupService connects to an StarupService at the specified network address.
func DialStarupService(network, addr string) (*StarupServiceClient, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, err
	}
	return &StarupServiceClient{c}, nil
}

// DialStarupServiceTimeout connects to an StarupService at the specified network address.
func DialStarupServiceTimeout(network, addr string, timeout time.Duration) (*StarupServiceClient, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, err
	}
	return &StarupServiceClient{c}, nil
}
